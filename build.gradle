plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.6'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
    id("com.diffplug.spotless") version "6.18.0"
}

group = 'site.cilicili'
version = '0.0.1'
java {
    sourceCompatibility = JavaVersion.VERSION_17
}

jar {
    enabled(false)
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
configurations.all {
    exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    exclude group: "commons-logging", module: 'commons-logging'
}
repositories {
    mavenCentral()
}


dependencies {
    implementation group: 'com.alipay.sdk', name: 'alipay-sdk-java', version: '4.39.40.ALL'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    // https://mvnrepository.com/artifact/org.redisson/redisson-spring-boot-starter
    implementation 'org.redisson:redisson-spring-boot-starter:3.25.2'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-pool2
    implementation 'org.apache.commons:commons-pool2:2.12.0'


    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-undertow
    implementation 'org.springframework.boot:spring-boot-starter-undertow'

    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0"
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
//    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'com.baomidou:mybatis-plus-boot-starter:3.5.3.1'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'cn.licoy:encrypt-body-spring-boot-starter:1.2.3'
    implementation 'com.github.xiaoymin:knife4j-openapi3-jakarta-spring-boot-starter:4.3.0'
    // https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter
    implementation 'com.alibaba:druid-spring-boot-starter:1.2.20'
    // https://mvnrepository.com/artifact/com.esotericsoftware.yamlbeans/yamlbeans
    // https://mvnrepository.com/artifact/cn.hutool/hutool-all
    implementation 'cn.hutool:hutool-all:5.8.23'
    // https://mvnrepository.com/artifact/org.yaml/snakeyaml
    implementation 'org.yaml:snakeyaml:2.2'
    // https://mvnrepository.com/artifact/org.aspectj/aspectjweaver
    implementation 'org.aspectj:aspectjweaver:1.9.20.1'
    // https://mvnrepository.com/artifact/org.mapstruct/mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    // https://mvnrepository.com/artifact/org.mapstruct/mapstruct-processor
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    compileOnly 'io.jsonwebtoken:jjwt-api:0.11.4'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.4'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.4'
    implementation 'org.hibernate:hibernate-core:5.5.7.Final' // 替换为您使用的 Hibernate 版本
}
// 配置bootJar进行打包
// 清除现有的lib目录
task clearJar(type: Delete) {
    delete "$buildDir\\libs\\lib"
}

// 将依赖包复制到lib目录
task copyJar(type: Copy, dependsOn: 'clearJar') {
    from configurations.runtimeClasspath
    into "$buildDir\\libs\\lib"
}
bootJar {
    // 例外所有的jar
    excludes = ["*.jar"]
    TestLineNumber.main()
    // lib目录的清除和复制任务
    dependsOn clearJar
    dependsOn copyJar
    dependsOn spotlessApply
    duplicatesStrategy = 'exclude'
    // 指定依赖包的路径
    manifest {
        attributes 'Class-Path': configurations.runtimeClasspath.files.collect { "lib/$it.name" }.join(' ')
    }
}
sourceSets {
    main {
        resources {
            exclude("gin-quasar-admin_bak.sql")
        }
    }
}
test {
    enabled(false)
}
tasks.withType(Test.class) {
    useJUnitPlatform()
    finalizedBy("jacocoTestReport")
}
tasks.jacocoTestReport {
    dependsOn(tasks.test)

    reports {
        html.required.set(true)
        html.outputLocation.set(file("$buildDir/jacoco/html"))
    }
}

tasks.compileJava {
    dependsOn(tasks.clean)
}

spotless {
    java {
        palantirJavaFormat()
        indentWithSpaces()
        formatAnnotations()
        removeUnusedImports()
        trimTrailingWhitespace()
        importOrder("site.cilicili", "java", "javax", "jakarta", "org", "com", "lombok")
    }

    kotlin {
        ktlint()
        gradle
        indentWithSpaces()
        trimTrailingWhitespace()
    }

    kotlinGradle {
        ktlint()
        indentWithSpaces()
        trimTrailingWhitespace()
    }
}


class TestLineNumber {
    static int counter;

    static void main(String[] args) throws Exception {
        counterDirCodeLines(new File("src/main/java/site/cilicili"));
        System.out.println("代码行数：" + counter);
    }

    /**
     * 统计指定的目录的代码的行数
     *
     * @return
     */
    public static void counterDirCodeLines(File file) throws Exception {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File f : files) {
                counterDirCodeLines(f);
            }
        } else {
            counter += counterFileCodeLines(file);
        }
    }

    /**
     * 统计指定文件的代码行数
     *
     * @param file
     * @return
     */
    public static int counterFileCodeLines(File file) throws Exception {
        LineNumberReader lnr = null;
        try {
            lnr = new LineNumberReader(new FileReader(file));
            String str = lnr.readLine();
            while (str != null) {
                str = lnr.readLine();
            }
            return lnr.getLineNumber();
        } finally {
            lnr.close();
        }
    }
}